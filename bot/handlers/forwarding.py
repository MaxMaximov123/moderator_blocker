from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ChatPermissions
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from sqlalchemy import select
from db.session import AsyncSession
from db.models import Admin, Group, UnblockedUserLimit

router = Router()


class UnlockState(StatesGroup):
    waiting_for_group_selection = State()
    waiting_for_limit = State()
    waiting_for_delete_delay = State()


@router.message(F.contact)
async def handle_user_contact(msg: Message, state: FSMContext):
    contact = msg.contact
    if not contact.user_id:
        await msg.answer("‚ö†Ô∏è –£ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ—Ç user_id. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º–µ–Ω–Ω–æ —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º —á–µ—Ä–µ–∑ Telegram.")
        return

    await state.update_data(request_user_id=contact.user_id, request_phone=contact.phone_number)

    # –î–æ—Å—Ç–∞—ë–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
    async with AsyncSession() as session:
        result = await session.execute(select(Admin))
        admins = result.scalars().all()

    if not admins:
        await msg.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤.")
        return

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üë§ {admin.username}", callback_data=f"req_admin_{admin.id}")]
        for admin in admins
    ])
    await msg.answer("–ö–æ–º—É –∏–∑ –∞–¥–º–∏–Ω–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å?", reply_markup=kb)


@router.callback_query(F.data.startswith("req_admin_"))
async def process_admin_choice(cb: CallbackQuery, state: FSMContext, bot: Bot):
    admin_id = int(cb.data.split("_")[-1])
    data = await state.get_data()
    user_id = data.get("request_user_id")
    phone = data.get("request_phone")

    # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{user_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
        ]
    ])
    await bot.send_message(
        chat_id=admin_id,
        text=f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}",
        reply_markup=kb
    )
    await cb.message.edit_text("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É ‚úÖ")
    await state.clear()


@router.callback_query(F.data.startswith("approve_"))
async def process_admin_approve(cb: CallbackQuery, state: FSMContext):
    target_user_id = int(cb.data.split("_")[-1])
    admin_id = cb.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(admin_id=admin_id, target_user_id=target_user_id)

    async with AsyncSession() as session:
        admin = await session.get(Admin, admin_id)
        if not admin:
            await cb.message.answer("‚õîÔ∏è –í—ã –Ω–µ –∞–¥–º–∏–Ω.")
            return

        stmt = select(Group).where(Group.admin_username == admin.username)
        result = await session.execute(stmt)
        groups = result.scalars().all()

        if not groups:
            await cb.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø.")
            return

        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=group.title, callback_data=f"unlock_{group.id}")]
            for group in groups
        ])

        await cb.message.answer(
            f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ {target_user_id} –æ–¥–æ–±—Ä–µ–Ω.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
            reply_markup=kb
        )
        await state.set_state(UnlockState.waiting_for_group_selection)


@router.callback_query(F.data.startswith("reject_"))
async def process_admin_reject(cb: CallbackQuery, bot: Bot):
    target_user_id = int(cb.data.split("_")[-1])
    await cb.message.edit_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    try:
        await bot.send_message(chat_id=target_user_id, text="‚õîÔ∏è –í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    except Exception:
        pass
    
@router.callback_query(StateFilter(UnlockState.waiting_for_group_selection), F.data.startswith("unlock_"))
async def process_group_select(cb: CallbackQuery, state: FSMContext):
    group_id = int(cb.data.split("_")[1])
    await state.update_data(group_id=group_id)
    async with AsyncSession() as session:
        data = await state.get_data()
        target_user_id = data.get("target_user_id")
        stmt = select(UnblockedUserLimit).where(
            UnblockedUserLimit.user_id == target_user_id,
            UnblockedUserLimit.group_id == group_id
        )
        result = await session.execute(stmt)
        limit = result.scalar_one_or_none()
        if limit and limit.max_messages is None:
            await cb.message.edit_text("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑–ª–∏–º–∏—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            await state.clear()
            return
        remaining = limit.max_messages - limit.used_messages if limit else 0

    await cb.message.edit_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ {remaining} —Å–æ–æ–±—â–µ–Ω–∏–π.\n–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–º—É –¥–æ–±–∞–≤–∏—Ç—å?")
    await state.set_state(UnlockState.waiting_for_limit)


@router.message(StateFilter(UnlockState.waiting_for_limit))
async def process_limit_input(msg: Message, state: FSMContext, bot: Bot):
    try:
        max_messages = int(msg.text.strip())
        if max_messages < 0:
            raise ValueError
    except ValueError:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –∏ –≤—ã—à–µ.")
        return

    await state.update_data(max_messages=max_messages)
    await state.set_state(UnlockState.waiting_for_delete_delay)
    await msg.answer("–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? (0 = –Ω–µ —É–¥–∞–ª—è—Ç—å)")


@router.message(StateFilter(UnlockState.waiting_for_delete_delay))
async def process_delete_delay(msg: Message, state: FSMContext, bot: Bot):
    try:
        delay = int(msg.text.strip())
        if delay < 0:
            raise ValueError
    except ValueError:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç (0 = –Ω–µ —É–¥–∞–ª—è—Ç—å).")
        return

    data = await state.get_data()
    group_id = data["group_id"]
    target_user_id = data["target_user_id"]
    max_messages = data["max_messages"]

    async with AsyncSession() as session:
        stmt = select(UnblockedUserLimit).where(
            UnblockedUserLimit.user_id == target_user_id,
            UnblockedUserLimit.group_id == group_id
        )
        result = await session.execute(stmt)
        existing_limit = result.scalar_one_or_none()

        if existing_limit:
            remaining = existing_limit.max_messages - existing_limit.used_messages
            existing_limit.max_messages += max_messages
            existing_limit.delete_after_minutes = delay or None
            await session.commit()
            new_total = existing_limit.max_messages - existing_limit.used_messages
            await grant_permissions(bot, group_id, target_user_id)
            await msg.answer(
                f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ. –ë—ã–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {remaining}. –î–æ–±–∞–≤–ª–µ–Ω–æ: {max_messages}. –¢–µ–ø–µ—Ä—å: {new_total}.\n"
                f"üóë –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {'–Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è' if delay == 0 else f'—á–µ—Ä–µ–∑ {delay} –º–∏–Ω.'}"
            )
        else:
            limit = UnblockedUserLimit(
                user_id=target_user_id,
                group_id=group_id,
                max_messages=max_messages,
                used_messages=0,
                delete_after_minutes=delay or None
            )
            session.add(limit)
            await session.commit()
            await grant_permissions(bot, group_id, target_user_id)
            await msg.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω. –î–æ—Å—Ç—É–ø–Ω–æ: {max_messages} —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
                f"üóë –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {'–Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è' if delay == 0 else f'—á–µ—Ä–µ–∑ {delay} –º–∏–Ω.'}"
            )

    await state.clear()


async def grant_permissions(bot: Bot, group_id: int, user_id: int):
    try:
        await bot.restrict_chat_member(
            chat_id=group_id,
            user_id=user_id,
            permissions=ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True
            )
        )
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞]: {e}")